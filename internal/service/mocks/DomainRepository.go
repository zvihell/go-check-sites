// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	models "check-domain-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// DomainRepository is an autogenerated mock type for the DomainRepository type
type DomainRepository struct {
	mock.Mock
}

// GetByName provides a mock function with given fields: name
func (_m *DomainRepository) GetByName(name string) (models.Domain, error) {
	ret := _m.Called(name)

	var r0 models.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Domain, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) models.Domain); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.Domain)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMax provides a mock function with given fields:
func (_m *DomainRepository) GetMax() (models.Domain, error) {
	ret := _m.Called()

	var r0 models.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.Domain, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.Domain); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Domain)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMin provides a mock function with given fields:
func (_m *DomainRepository) GetMin() (models.Domain, error) {
	ret := _m.Called()

	var r0 models.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.Domain, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.Domain); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Domain)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *DomainRepository) Save(_a0 models.Domain) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Domain) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDomainRepository creates a new instance of DomainRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomainRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DomainRepository {
	mock := &DomainRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
